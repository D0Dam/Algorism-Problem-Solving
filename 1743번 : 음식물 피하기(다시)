#include<iostream>
#include<vector>
#include<algorithm>
using namespace std;

int arr[101][101] = {0, };
bool visited[101][101] = {false, };
int N, M, K;
int dx[4] = {0, 0, -1, 1};
int dy[4] = {-1, 1, 0, 0};
int TrashMax = 0;
int T = 0;

void dfs(int y, int x){
    T++;
    visited[y][x] = true;
    for(int i = 0; i < 4; i++){
        int nx = x + dx[i];
        int ny = y + dy[i];

        if(nx < 1 || ny < 1 || nx > M || ny > N)
            continue;

        if(!visited[ny][nx] && arr[ny][nx] == 1){
            dfs(ny, nx);
        }
    }
}

int main(){
    cin >> N >> M >> K;
    for(int i = 0; i < K; i++){
        int x, y;
        cin >> y >> x;
        arr[y][x] = 1;
    }
    
    for(int i = 1; i <= N; i++){
        for(int j = 1; j <= M; j++){
            if(!visited[j][i] && arr[j][i] == 1){
                T = 0;
                dfs(j, i);
                if(TrashMax <= T)
                    TrashMax = T;
            }
        }
    }

    cout << TrashMax << endl;

    return 0;
}
