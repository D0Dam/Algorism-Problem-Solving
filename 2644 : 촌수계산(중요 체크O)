#include<iostream>
#include<cstdio>
#include<queue>
#include<algorithm>
#include<vector>
using namespace std;

class Graph{
public:
    int N, P1, P2;
    vector<vector<int>> list;

    Graph(int n, int p1, int p2) : N(n), P1(p1), P2(p2) {
        list.resize(N+1);
    }

    void AddEdge(int u, int v){
            list[u].push_back(v);
            list[v].push_back(u);
    }

    void SortList(){
        for(int i = 0; i < N; i++)
            sort(list[i].begin(), list[i].end());
    }

    int bfs(){

        if(P1 == P2)
            return 0;

        int chon = 0;
        queue<int> Q;
        vector<bool> visited(N+1, false);
        Q.push(P1);
        visited[P1] = true;
        
        
        while(!Q.empty()){
            int qSize = Q.size();          //이 큐의 사이즈를 받아서
            for(int i = 0; i < qSize; i++){//여기에 넣어주고 사이즈만큼 for문을 돌려주는 것이 중요
                int curr = Q.front();      // 이것때문에 겁나 많이 틀림(이 과정을 생략해서)
                Q.pop();
                if(curr == P2){
                    return chon;
                }
                for(int next: list[curr]){
                    if(!visited[next]){
                        visited[next] = true;
                        Q.push(next);
                    }
                }   
            }
            chon++;
        }
        return -1;
    }
};


int main(){

    int n, m, p1, p2;
    scanf("%d ", &n);
    scanf("%d %d ", &p1, &p2);
    scanf("%d ", &m);
    
    Graph G(n, p1, p2);

    for(int i = 0; i < m; i++){
        int u, v;
        scanf("%d %d", &u, &v);
        G.AddEdge(u, v);
    }
    cout << G.bfs() << endl;
    
    return 0;
}
